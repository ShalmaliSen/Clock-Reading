#include<stdio.h>
#include<conio.h>
#include<algorithm>
#include<numeric>
#include<iostream>
#include<functional>
#include<fstream>

#include "opencv2/opencv.hpp"
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/types_c.h>
#include <opencv2/video/video.hpp>
#include <opencv2/video/background_segm.hpp>

#include<Windows.h>
#include <math.h>


using namespace std;
using namespace cv;


int capture_camera()
{
	//Capturing frame as image
	VideoCapture cap(0);
	if (cap.isOpened() == false)  
	{
	  cout << "Cannot open the video camera" << endl;
	  cin.get(); 
	  return -1;
	} 


	 string window_name = " CameraFeed";
	 namedWindow(window_name); 
 
	 while (true)
	 {
	  Mat frame;
	  bool bSuccess = cap.read(frame); 
  
	  imshow(window_name, frame);

  
	  if (waitKey(10) == 27)
	  {
	   cout << "Esc key is pressed by user. Stoppig the video" << endl;

	   imwrite("f.png", frame);
	   break;
  
	  }
	}
}

//cv::Mat getImage(char* path)
//{
	//Mat src = imread(path); 
	//return src;
//}

void getImage(char* path, cv::Mat& src)
{
	src = imread(path); 
	//imshow("CameraFeed", src);
}

void edgeDetected(cv::Mat& src)
{
	Mat gray, edge, draw,blurrr;
	cvtColor(src, gray, CV_BGR2GRAY);
 
	Canny( gray, edge, 50, 150, 3);
 
	edge.convertTo(draw, CV_8U);
	GaussianBlur(draw, blurrr, Size(9, 9), 2, 2 );
	//imshow("Grayscale", gray);
	//imshow("edge1", edge);
	//imshow("draw1", draw);
	//imshow("blured", blurrr);

}

void HGCircle(cv::Mat& blurrr, cv::Mat& src)
{
	vector<Vec3f> circles;
	HoughCircles( blurrr, circles, CV_HOUGH_GRADIENT, 1, blurrr.rows/8, 210, 210, 0, 0 );

  for( size_t i = 0; i < circles.size(); i++ )
  {
      Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
      int radius = cvRound(circles[i][2]);
      // circle center
      circle( src, center, 3, Scalar(0,255,0), -1, 8, 0 );
      // circle outline
      circle( src, center, radius, Scalar(0,0,255), 1, 8, 0 );
   }




}
