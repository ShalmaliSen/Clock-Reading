#include<stdio.h>
#include<conio.h>
#include<algorithm>
#include<numeric>
#include<iostream>
#include<functional>
#include<fstream>
#include "opencv2/opencv.hpp"
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/types_c.h>
#include <opencv2/video/video.hpp>
#include <opencv2/video/background_segm.hpp>
#include<Windows.h>



using namespace std;
using namespace cv;


//int main(int argc, char* argv[])
//{
//	VideoCapture cap(0);
//	if (cap.isOpened() == false)  
// {
//  cout << "Cannot open the video camera" << endl;
//  cin.get(); 
//  return -1;
// } 
////int frame_width = cap.get(CV_CAP_PROP_FRAME_WIDTH); 
////int frame_height = cap.get(CV_CAP_PROP_FRAME_HEIGHT); 
//    
//   // Size frame_size(frame_width, frame_height);
//    //int frames_per_second = 10;
//
//    
//  //  VideoWriter oVideoWriter("clock.avi", CV_FOURCC('M','J','P','G'),10, Size(frame_width,frame_height),true);
//    
//    
//   // if (oVideoWriter.isOpened() == false) 
//   // {
//     //   cout << "Cannot save the video to a file" << endl;
//       // cin.get();
//        //return -1;
//    //}
//
// string window_name = " CameraFeed";
// namedWindow(window_name); 
// 
//// while (true)
// //{
//  Mat frame;
//  bool bSuccess = cap.read(frame); 
//
//
//  
// // if (bSuccess == false) 
// // {
//   //cout << "Video camera is disconnected" << endl;
//   //cin.get(); 
// //  break;
////  }
// // oVideoWriter.write(frame); 
//
//  
//  imshow(window_name, frame);
//
//  
//  if (waitKey(10) == 27)
//  {
//   cout << "Esc key is pressed by user. Stoppig the video" << endl;
//  // break;
//  }
//// }
//
// //oVideoWriter.release();
// 
// 
// 
//
// //edge detection
// Mat gray, edge, draw;
//    cvtColor(frame, gray, CV_BGR2GRAY);
// 
//    Canny( gray, edge, 50, 150, 3);
// 
//    edge.convertTo(draw, CV_8U);
//    namedWindow("EdgeDetected", CV_WINDOW_AUTOSIZE);
//    imshow("EdgeDetected", draw);
// 
//      waitKey(0);                                                
//
//return 0;
//
//
//	
//}







int main(int argc, char* argv[])
{
	// Capturing frame as image
	//VideoCapture cap(0);
	//if (cap.isOpened() == false)  
//	{
	 // cout << "Cannot open the video camera" << endl;
	 // cin.get(); 
	 // return -1;
	//} 


// string window_name = " CameraFeed";
 //namedWindow(window_name); 
 
 //while (true)
// {
 // Mat frame;
  //bool bSuccess = cap.read(frame); 
  
//  imshow(window_name, frame);

  
  //if (waitKey(10) == 27)
 // {
   //cout << "Esc key is pressed by user. Stoppig the video" << endl;

   //imwrite("d.png", frame);
  // break;
  
 // }
 //}


//edge detection of captured image
 Mat src = imread("a.png"); 
 Mat gray, edge, draw,blurrr;
    cvtColor(src, gray, CV_BGR2GRAY);
 
    Canny( gray, edge, 50, 150, 3);
 
    edge.convertTo(draw, CV_8U);
	GaussianBlur(draw, blurrr, Size(9, 9), 2, 2 );
	vector<Vec3f> circles;
	HoughCircles( blurrr, circles, CV_HOUGH_GRADIENT, 1, blurrr.rows/8, 210, 210, 0, 0 );



    namedWindow("EdgeDetected", CV_WINDOW_AUTOSIZE);
    imshow("EdgeDetected", draw);
	 namedWindow("CameraFeed", CV_WINDOW_AUTOSIZE);
    imshow("CameraFeed", src);
	namedWindow("noiseReduced", CV_WINDOW_AUTOSIZE);
    imshow("noiseReduced", blurrr);
	
  for( size_t i = 0; i < circles.size(); i++ )
  {
      Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
      int radius = cvRound(circles[i][2]);
      // circle center
      circle( src, center, 3, Scalar(0,255,0), -1, 8, 0 );
      // circle outline
      circle( src, center, radius, Scalar(0,0,255), 3, 8, 0 );
   }

     
	    

  
  namedWindow( "Hough Circle Transform ", CV_WINDOW_AUTOSIZE );
  imshow( "Hough Circle Transform ", src );
 
      waitKey(0);                                                

return 0;



	
}



